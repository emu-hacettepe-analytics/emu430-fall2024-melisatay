# Extracting ratings
rating <- data_html %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
# Extracting votes
vote <- data_html %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
temp <- tibble(Title = title_names, Year = year, Duration = duration, Rating = rating, Votes = vote)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
movies <- tibble(Title = character(), Year = numeric(), Duration = character(), Rating = numeric(), Votes = numeric())
# Function to convert duration from to minutes
convert_to_minutes <- function(time_str) {
if (str_detect(time_str, "h")) {
# "h" ve "m" arasındaki dakikaları ve "h"den önceki saatleri bul
hours <- as.numeric(str_extract(time_str, "\\d+(?=h)"))
minutes <- as.numeric(str_extract(time_str, "(?<=h)\\s*\\d+"))
total_minutes <- hours * 60 + ifelse(is.na(minutes), 0, minutes)
} else {
# "h" bulunmuyorsa ilk iki karakteri al
total_minutes <- as.numeric(substr(time_str, 1, str_detect(time_str, "m")*2))
}
return(total_minutes)
}
# Loop through each URL
for (i in imdb_url_vector) {
data_html <- read_html(i)
}
# Extracting movie titles
title_names <- data_html |> html_nodes('.ipc-title__text') |> html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extracting years
year <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
# Extracting durations
duration <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
duration <- substr(duration, start = 5, stop = 14)
# Extracting ratings
rating <- data_html %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
# Extracting votes
vote <- data_html %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
temp <- tibble(Title = title_names, Year = year, Duration = duration, Rating = rating, Votes = vote)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
movies <- tibble(Title = character(), Year = numeric(), Duration = character(), Rating = numeric(), Votes = numeric())
# Function to convert duration from to minutes
convert_to_minutes <- function(time_str) {
if (str_detect(time_str, "h")) {
# "h" ve "m" arasındaki dakikaları ve "h"den önceki saatleri bul
hours <- as.numeric(str_extract(time_str, "\\d+(?=h)"))
minutes <- as.numeric(str_extract(time_str, "(?<=h)\\s*\\d+"))
total_minutes <- hours * 60 + ifelse(is.na(minutes), 0, minutes)
} else {
# "h" bulunmuyorsa ilk iki karakteri al
total_minutes <- as.numeric(substr(time_str, 1, str_detect(time_str, "m")*2))
}
return(total_minutes)
}
# Loop through each URL
for (i in imdb_url_vector) {
data_html <- read_html(i)
}
# Extracting movie titles
title_names <- data_html |> html_nodes('.ipc-title__text') |> html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extracting years
year <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
# Extracting durations
duration <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
duration <- substr(duration, start = 5, stop = 14)
# Extracting ratings
rating <- data_html %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
# Extracting votes
vote <- data_html %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() %% 10
total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()
for (url in imdb_url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() %% 10
total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
movies <- data.frame(Title, Year, Duration, Rating, Votes)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
movies <- tibble(Title = character(), Year = numeric(), Duration = character(), Rating = numeric(), Votes = numeric())
# Function to convert duration from to minutes
convert_to_minutes <- function(time_str) {
if (str_detect(time_str, "h")) {
# "h" ve "m" arasındaki dakikaları ve "h"den önceki saatleri bul
hours <- as.numeric(str_extract(time_str, "\\d+(?=h)"))
minutes <- as.numeric(str_extract(time_str, "(?<=h)\\s*\\d+"))
total_minutes <- hours * 60 + ifelse(is.na(minutes), 0, minutes)
} else {
# "h" bulunmuyorsa ilk iki karakteri al
total_minutes <- as.numeric(substr(time_str, 1, str_detect(time_str, "m")*2))
}
return(total_minutes)
}
# Loop through each URL
for (i in imdb_url_vector) {
data_html <- read_html(i)
# Extracting movie titles
title_names <- data_html |> html_nodes('.ipc-title__text') |> html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extracting years
year <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
year <- html_text(year)
year <- substr(year, 1, 4)
year <- as.numeric(year)
# Extracting durations
duration <- data_html %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
duration <- substr(duration, start = 5, stop = 14)
# Extracting ratings
rating <- data_html %>% html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating")
rating <- html_text(rating)
rating <- substr(rating, 1, 3)
rating <- as.numeric(rating)
# Extracting votes
vote <- data_html %>% html_nodes(".sc-53c98e73-0.kRnqtn")
vote <- html_text(vote)
vote <- sub("Votes", "" ,vote)
vote <- sub(",", "", vote)
vote <- as.numeric(vote)
temp <- tibble(Title = title_names, Year = year, Duration = duration, Rating = rating, Votes = vote)
# Append to the main data frame
movies <- bind_rows(movies, temp)
}
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
scrape_imdb <- function(url) {
data_html <- read_html(url)
title_names <- data_html %>%
html_nodes('.ipc-title__text') %>%
html_text() %>%
tail(-1) %>%
head(-1)
# Extract years
years <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(1)') %>%
html_text() %>%
str_extract("\\d{4}") %>%
as.numeric()
# Extract durations
durations <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(2)') %>%
html_text() %>%
str_replace_all("h ", "*60 +") %>%
str_replace_all("m", "") %>%
eval(parse(text = .))
# Extract ratings
ratings <- data_html %>%
html_nodes('.ipc-rating-star') %>%
html_text() %>%
as.numeric()
# Extract votes
votes <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li--vote') %>%
html_text() %>%
str_replace_all("[^0-9]", "") %>%
as.numeric()
# Combine into a data frame
tibble(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
}
# Scrape data from both URLs and combine into a single data frame
movie_data <- map_dfr(urls, scrape_imdb)
scrape_imdb <- function(url) {
data_html <- read_html(url)
title_names <- data_html %>%
html_nodes('.ipc-title__text') %>%
html_text() %>%
tail(-1) %>%
head(-1)
# Extract years
years <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(1)') %>%
html_text() %>%
str_extract("\\d{4}") %>%
as.numeric()
# Extract durations
durations <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(2)') %>%
html_text() %>%
str_replace_all("h ", "*60 +") %>%
str_replace_all("m", "") %>%
eval(parse(text = .))
# Extract ratings
ratings <- data_html %>%
html_nodes('.ipc-rating-star') %>%
html_text() %>%
as.numeric()
# Extract votes
votes <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li--vote') %>%
html_text() %>%
str_replace_all("[^0-9]", "") %>%
as.numeric()
# Combine into a data frame
tibble(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
}
# Scrape data from both URLs and combine into a single data frame
movie_data <- map_dfr(imdb_url_vector, scrape_imdb)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
# IMDb'den veri çekme fonksiyonu
scrape_imdb <- function(url) {
data_html <- read_html(url)
# Film isimlerini çekme
title_names <- data_html %>%
html_nodes('.ipc-title__text') %>%
html_text(trim = TRUE) %>%
tail(-1) %>%  # İlk öğeyi kaldır (başlık)
head(-1)      # Son öğeyi kaldır (alt bilgi)
# Yılları çekme
years <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(1)') %>%
html_text(trim = TRUE) %>%
str_extract("\\d{4}") %>%
as.numeric()
# Süreleri çekme
durations <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(2)') %>%
html_text(trim = TRUE) %>%
str_replace_all("h ", "*60 +") %>%
str_replace_all("m", "") %>%
map_dbl(~ eval(parse(text = .)))  # Süreyi dakika cinsinden hesapla
# Puanları çekme
ratings <- data_html %>%
html_nodes('.ipc-rating-star') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Oy sayısını çekme
votes <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li--vote') %>%
html_text(trim = TRUE) %>%
str_replace_all("[^0-9]", "") %>%
as.numeric()
# Veriyi bir tibble içinde birleştirme
tibble(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
}
# Tüm URL'lerden veri çekip birleştirme
movie_data <- map_dfr(imdb_url_vector, scrape_imdb)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
scrape_imdb <- function(url) {
data_html <- tryCatch(read_html(url), error = function(e) NA)
# Eğer sayfa yüklenemediyse NA döndür
if (is.na(data_html)) {
return(tibble(
Title = NA,
Year = NA,
Duration = NA,
Rating = NA,
Votes = NA
))
}
# Film isimlerini çekme
title_names <- data_html %>%
html_nodes('.ipc-title__text') %>%
html_text(trim = TRUE) %>%
tail(-1) %>% # İlk öğeyi kaldır (başlık)
head(-1) # Son öğeyi kaldır (alt bilgi)
# Yılları çekme
years <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(1)') %>%
html_text(trim = TRUE) %>%
str_extract("\\d{4}") %>%
as.numeric()
# Eğer veri çekilemezse NA ile doldur
if (length(years) == 0) years <- rep(NA, length(title_names))
# Süreleri çekme
durations <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(2)') %>%
html_text(trim = TRUE) %>%
str_replace_all("h ", "*60 +") %>%
str_replace_all("m", "") %>%
map_dbl(~ tryCatch(eval(parse(text = .)), error = function(e) NA))
if (length(durations) == 0) durations <- rep(NA, length(title_names))
# Puanları çekme
ratings <- data_html %>%
html_nodes('.ipc-rating-star') %>%
html_text(trim = TRUE) %>%
as.numeric()
if (length(ratings) == 0) ratings <- rep(NA, length(title_names))
# Oy sayısını çekme
votes <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li--vote') %>%
html_text(trim = TRUE) %>%
str_replace_all("[^0-9]", "") %>%
as.numeric()
if (length(votes) == 0) votes <- rep(NA, length(title_names))
# Veriyi bir tibble içinde birleştirme
tibble(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
}
# Tüm URL'lerden veri çekip birleştirme
movie_data <- map_dfr(imdb_url_vector, scrape_imdb)
library(tidyverse)
library(rvest)
library(stringr)
library(knitr)
library(ggplot2)
imdb_url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
imdb_url_vector <- c(imdb_url_1, imdb_url_2)
scrape_imdb <- function(url) {
data_html <- tryCatch(read_html(url), error = function(e) NA)
if (is.na(data_html)) {
return(tibble(
Title = NA,
Year = NA,
Duration = NA,
Rating = NA,
Votes = NA
))
}
# Film isimlerini çekme
title_names <- data_html %>%
html_nodes('.ipc-title__text') %>%
html_text(trim = TRUE) %>%
tail(-1) %>%
head(-1)
# Yılları çekme
years <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(1)') %>%
html_text(trim = TRUE) %>%
str_extract("\\d{4}") %>%
as.numeric()
# Süreleri çekme
durations <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li:nth-child(2)') %>%
html_text(trim = TRUE) %>%
str_replace_all("h ", "*60 +") %>%
str_replace_all("m", "") %>%
map_dbl(~ tryCatch(eval(parse(text = .)), error = function(e) NA))
# Puanları çekme
ratings <- data_html %>%
html_nodes('.ipc-rating-star') %>%
html_text(trim = TRUE) %>%
as.numeric()
# Oy sayısını çekme
votes <- data_html %>%
html_nodes('.ipc-metadata-list-summary-item__li--vote') %>%
html_text(trim = TRUE) %>%
str_replace_all("[^0-9]", "") %>%
as.numeric()
# Veri uzunluklarını eşitleme
max_length <- length(title_names) # Title sütununu referans al
years <- years[1:max_length]
durations <- durations[1:max_length]
ratings <- ratings[1:max_length]
votes <- votes[1:max_length]
# Eksik değerleri NA ile doldur
if (length(years) < max_length) years <- c(years, rep(NA, max_length - length(years)))
if (length(durations) < max_length) durations <- c(durations, rep(NA, max_length - length(durations)))
if (length(ratings) < max_length) ratings <- c(ratings, rep(NA, max_length - length(ratings)))
if (length(votes) < max_length) votes <- c(votes, rep(NA, max_length - length(votes)))
# Veriyi bir tibble içinde birleştirme
tibble(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes
)
}
# Tüm URL'lerden veri çekip birleştirme
movie_data <- map_dfr(imdb_url_vector, scrape_imdb)
# Sonuçları görüntüleme
print(movie_data)
bottom_5_movies <- movies |> arrange(Rating)
kable(head(bottom_5_movies, 5), caption = "Bottom 5 Movies")
